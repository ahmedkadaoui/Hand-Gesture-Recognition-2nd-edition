{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "979c3612",
   "metadata": {},
   "source": [
    "# Kaggle challenge : Hand Gesture Recognition 2nd edition "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "61b3dc09",
   "metadata": {},
   "source": [
    "# IMPORTS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "ea4a9f51",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np \n",
    "import pandas as pd \n",
    "import os\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import csv\n",
    "\n",
    "from keras.layers import Dense,Conv2D,Flatten,MaxPool2D,Dropout\n",
    "from keras.models import Sequential\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import confusion_matrix\n",
    "\n",
    "np.random.seed(1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ec7f033d",
   "metadata": {},
   "source": [
    "# DATA PREPROCESSING "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "3cf63ba7",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Loading the data \n",
    "\n",
    "#train data\n",
    "train_csv = pd.read_csv(r'C:\\Users\\ahmed\\Desktop\\labs\\train.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "50358704",
   "metadata": {},
   "outputs": [],
   "source": [
    "#test data\n",
    "test_csv = pd.read_csv(r'C:\\Users\\ahmed\\Desktop\\labs\\test.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "afd5edb8",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Getting file names (same as ids' in our case) , and labels \n",
    "\n",
    "filenames = [fname for fname in map(str , train_csv['id'].tolist())]\n",
    "labels = train_csv['label'].tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "095cfbf1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "file names:  ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '100', '101', '102', '103', '104', '105', '106', '107', '108', '109', '110', '111', '112', '113', '114', '115', '116', '117', '118', '119', '120', '121', '122', '123', '124', '125', '126', '127', '128', '129', '130', '131', '132', '133', '134', '135', '136', '137', '138', '139', '140', '141', '142', '143', '144', '145', '146', '147', '148', '149', '150', '151', '152', '153', '154', '155', '156', '157', '158', '159', '160', '161', '162', '163', '164', '165', '166', '167', '168', '169', '170', '171', '172', '173', '174', '175', '176', '177', '178', '179', '180', '181', '182', '183', '184', '185', '186', '187', '188', '189', '190', '191', '192', '193', '194', '195', '196', '197', '198', '199', '200', '201', '202', '203', '204', '205', '206', '207', '208', '209', '210', '211', '212', '213', '214', '215', '216', '217', '218', '219', '220', '221', '222', '223', '224', '225', '226', '227', '228', '229', '230', '231', '232', '233', '234', '235', '236', '237', '238', '239', '240', '241', '242', '243', '244', '245', '246', '247', '248', '249', '250', '251', '252', '253', '254', '255', '256', '257', '258', '259', '260', '261', '262', '263', '264', '265', '266', '267', '268', '269', '270', '271', '272', '273', '274', '275', '276', '277', '278', '279', '280', '281', '282', '283', '284', '285', '286', '287', '288', '289', '290', '291', '292', '293', '294', '295', '296', '297', '298', '299', '300', '301', '302', '303', '304', '305', '306', '307', '308', '309', '310', '311', '312', '313', '314', '315', '316', '317', '318', '319', '320', '321', '322', '323', '324', '325', '326', '327', '328', '329', '330', '331', '332', '333', '334', '335', '336', '337', '338', '339', '340', '341', '342', '343', '344', '345', '346', '347', '348', '349', '350', '351', '352', '353', '354', '355', '356', '357', '358', '359', '360', '361', '362', '363', '364', '365', '366', '367', '368', '369', '370', '371', '372', '373', '374', '375', '376', '377', '378', '379', '380', '381', '382', '383', '384', '385', '386', '387', '388', '389', '390', '391', '392', '393', '394', '395', '396', '397', '398', '399', '400', '401', '402', '403', '404', '405', '406', '407', '408', '409', '410', '411', '412', '413', '414', '415', '416', '417', '418', '419', '420', '421', '422', '423', '424', '425', '426', '427', '428', '429', '430', '431', '432', '433', '434', '435', '436', '437', '438', '439', '440', '441', '442', '443', '444', '445', '446', '447', '448', '449', '450', '451', '452', '453', '454', '455', '456', '457', '458', '459', '460', '461', '462', '463', '464', '465', '466', '467', '468', '469', '470', '471', '472', '473', '474', '475', '476', '477', '478', '479', '480', '481', '482', '483', '484', '485', '486', '487', '488', '489', '490', '491', '492', '493', '494', '495', '496', '497', '498', '499', '500', '501', '502', '503', '504', '505', '506', '507', '508', '509', '510', '511', '512', '513', '514', '515', '516', '517', '518', '519', '520', '521', '522', '523', '524', '525', '526', '527', '528', '529', '530', '531', '532', '533', '534', '535', '536', '537', '538', '539', '540', '541', '542', '543', '544', '545', '546', '547', '548', '549', '550', '551', '552', '553', '554', '555', '556', '557', '558', '559', '560', '561', '562', '563', '564', '565', '566', '567', '568', '569', '570', '571', '572', '573', '574', '575', '576', '577', '578', '579', '580', '581', '582', '583', '584', '585', '586', '587', '588', '589', '590', '591', '592', '593', '594', '595', '596', '597', '598', '599', '600', '601', '602', '603', '604', '605', '606', '607', '608', '609', '610', '611', '612', '613', '614', '615', '616', '617', '618', '619', '620', '621', '622', '623', '624', '625', '626', '627', '628', '629', '630', '631', '632', '633', '634', '635', '636', '637', '638', '639', '640', '641', '642', '643', '644', '645', '646', '647', '648', '649', '650', '651', '652', '653', '654', '655', '656', '657', '658', '659', '660', '661', '662', '663', '664', '665', '666', '667', '668', '669', '670', '671', '672', '673', '674', '675', '676', '677', '678', '679', '680', '681', '682', '683', '684', '685', '686', '687', '688', '689', '690', '691', '692', '693', '694', '695', '696', '697', '698', '699', '700', '701', '702', '703', '704', '705', '706', '707', '708', '709', '710', '711', '712', '713', '714', '715', '716', '717', '718', '719', '720', '721', '722', '723', '724', '725', '726', '727', '728', '729', '730', '731', '732', '733', '734', '735', '736', '737', '738', '739', '740', '741', '742', '743', '744', '745', '746', '747', '748', '749', '750', '751', '752', '753', '754', '755', '756', '757', '758', '759', '760', '761', '762', '763', '764', '765', '766', '767', '768', '769', '770', '771', '772', '773', '774', '775', '776', '777', '778', '779', '780', '781', '782', '783', '784', '785', '786', '787', '788', '789', '790', '791', '792', '793', '794', '795', '796', '797', '798', '799', '800', '801', '802', '803', '804', '805', '806', '807', '808', '809', '810', '811', '812', '813', '814', '815', '816', '817', '818', '819', '820', '821', '822', '823', '824', '825', '826', '827', '828', '829', '830', '831', '832', '833', '834', '835', '836', '837', '838', '839', '840', '841', '842', '843', '844', '845', '846', '847', '848', '849', '850', '851', '852', '853', '854', '855', '856', '857', '858', '859', '860', '861', '862', '863', '864', '865', '866', '867', '868', '869', '870', '871', '872', '873', '874', '875', '876', '877', '878', '879', '880', '881', '882', '883', '884', '885', '886', '887', '888', '889', '890', '891', '892', '893', '894', '895', '896', '897', '898', '899', '900', '901', '902', '903', '904', '905', '906', '907', '908', '909', '910', '911', '912', '913', '914', '915', '916', '917', '918', '919', '920', '921', '922', '923', '924', '925', '926', '927', '928', '929', '930', '931', '932', '933', '934', '935', '936', '937', '938', '939', '940', '941', '942', '943', '944', '945', '946', '947', '948', '949', '950', '951', '952', '953', '954', '955', '956', '957', '958', '959', '960', '961', '962', '963', '964', '965', '966', '967', '968', '969', '970', '971', '972', '973', '974', '975', '976', '977', '978', '979', '980', '981', '982', '983', '984', '985', '986', '987', '988', '989', '990', '991', '992', '993', '994', '995', '996', '997', '998', '999', '1000', '1001', '1002', '1003', '1004', '1005', '1006', '1007', '1008', '1009', '1010', '1011', '1012', '1013', '1014', '1015', '1016', '1017', '1018', '1019', '1020', '1021', '1022', '1023', '1024', '1025', '1026', '1027', '1028', '1029', '1030', '1031', '1032', '1033', '1034', '1035', '1036', '1037', '1038', '1039', '1040', '1041', '1042', '1043', '1044', '1045', '1046', '1047', '1048', '1049', '1050', '1051', '1052', '1053', '1054', '1055', '1056', '1057', '1058', '1059', '1060', '1061', '1062', '1063', '1064', '1065', '1066', '1067', '1068', '1069', '1070', '1071', '1072', '1073', '1074', '1075', '1076', '1077', '1078', '1079', '1080', '1081', '1082', '1083', '1084', '1085', '1086', '1087', '1088', '1089', '1090', '1091', '1092', '1093', '1094', '1095', '1096', '1097', '1098', '1099', '1100', '1101', '1102', '1103', '1104', '1105', '1106', '1107', '1108', '1109', '1110', '1111', '1112', '1113', '1114', '1115', '1116', '1117', '1118', '1119', '1120', '1121', '1122', '1123', '1124', '1125', '1126', '1127', '1128', '1129', '1130', '1131', '1132', '1133', '1134', '1135', '1136', '1137', '1138', '1139', '1140', '1141', '1142', '1143', '1144', '1145', '1146', '1147', '1148', '1149', '1150', '1151', '1152', '1153', '1154', '1155', '1156', '1157', '1158', '1159', '1160', '1161', '1162', '1163', '1164', '1165', '1166', '1167', '1168', '1169', '1170', '1171', '1172', '1173', '1174', '1175', '1176', '1177', '1178', '1179', '1180', '1181', '1182', '1183', '1184', '1185', '1186', '1187', '1188', '1189', '1190', '1191', '1192', '1193', '1194', '1195', '1196', '1197', '1198', '1199', '1200', '1201', '1202', '1203', '1204', '1205', '1206', '1207', '1208', '1209', '1210', '1211', '1212', '1213', '1214', '1215', '1216', '1217', '1218', '1219', '1220', '1221', '1222', '1223', '1224', '1225', '1226', '1227', '1228', '1229', '1230', '1231', '1232', '1233', '1234', '1235', '1236', '1237', '1238', '1239', '1240', '1241', '1242', '1243', '1244', '1245', '1246', '1247', '1248', '1249', '1250', '1251', '1252', '1253', '1254', '1255', '1256', '1257', '1258', '1259', '1260', '1261', '1262', '1263', '1264', '1265', '1266', '1267', '1268', '1269', '1270', '1271', '1272', '1273', '1274', '1275', '1276', '1277', '1278', '1279', '1280', '1281', '1282', '1283', '1284', '1285', '1286', '1287', '1288', '1289', '1290', '1291', '1292', '1293', '1294', '1295', '1296', '1297', '1298', '1299', '1300', '1301', '1302', '1303', '1304', '1305', '1306', '1307', '1308', '1309', '1310', '1311', '1312', '1313', '1314', '1315', '1316', '1317', '1318', '1319', '1320', '1321', '1322', '1323', '1324', '1325', '1326', '1327', '1328', '1329', '1330', '1331', '1332', '1333', '1334', '1335', '1336', '1337', '1338', '1339', '1340', '1341', '1342', '1343', '1344', '1345', '1346', '1347', '1348', '1349', '1350', '1351', '1352', '1353', '1354', '1355', '1356', '1357', '1358', '1359', '1360', '1361', '1362', '1363', '1364', '1365', '1366', '1367', '1368', '1369', '1370', '1371', '1372', '1373', '1374', '1375', '1376', '1377', '1378', '1379', '1380', '1381', '1382', '1383', '1384', '1385', '1386', '1387', '1388', '1389', '1390', '1391', '1392', '1393', '1394', '1395', '1396', '1397', '1398', '1399', '1400', '1401', '1402', '1403', '1404', '1405', '1406', '1407', '1408', '1409', '1410', '1411', '1412', '1413', '1414', '1415', '1416', '1417', '1418', '1419', '1420', '1421', '1422', '1423', '1424', '1425', '1426', '1427', '1428', '1429', '1430', '1431', '1432', '1433', '1434', '1435', '1436', '1437', '1438', '1439', '1440', '1441', '1442', '1443', '1444', '1445', '1446', '1447', '1448', '1449', '1450', '1451', '1452', '1453', '1454', '1455', '1456', '1457', '1458', '1459', '1460', '1461', '1462', '1463', '1464', '1465', '1466', '1467', '1468', '1469', '1470', '1471', '1472', '1473', '1474', '1475', '1476', '1477', '1478', '1479', '1480', '1481', '1482', '1483', '1484', '1485', '1486', '1487', '1488', '1489', '1490', '1491', '1492', '1493', '1494', '1495', '1496', '1497', '1498', '1499', '1500', '1501', '1502', '1503', '1504', '1505', '1506', '1507', '1508', '1509', '1510', '1511', '1512', '1513', '1514', '1515', '1516', '1517', '1518', '1519', '1520', '1521', '1522', '1523', '1524', '1525', '1526', '1527', '1528', '1529', '1530', '1531', '1532', '1533', '1534', '1535', '1536', '1537', '1538', '1539', '1540', '1541', '1542', '1543', '1544', '1545', '1546', '1547', '1548', '1549', '1550', '1551', '1552', '1553', '1554', '1555', '1556', '1557', '1558', '1559', '1560', '1561', '1562', '1563', '1564', '1565', '1566', '1567', '1568', '1569', '1570', '1571', '1572', '1573', '1574', '1575', '1576', '1577', '1578', '1579', '1580', '1581', '1582', '1583', '1584', '1585', '1586', '1587', '1588', '1589', '1590', '1591', '1592', '1593', '1594', '1595', '1596', '1597', '1598', '1599', '1600', '1601', '1602', '1603', '1604', '1605', '1606', '1607', '1608', '1609', '1610', '1611', '1612', '1613', '1614', '1615', '1616', '1617', '1618', '1619', '1620', '1621', '1622', '1623', '1624', '1625', '1626', '1627', '1628', '1629', '1630', '1631', '1632', '1633', '1634', '1635', '1636', '1637', '1638', '1639', '1640', '1641', '1642', '1643', '1644', '1645', '1646', '1647', '1648', '1649', '1650', '1651', '1652', '1653', '1654', '1655', '1656', '1657', '1658', '1659', '1660', '1661', '1662', '1663', '1664', '1665', '1666', '1667', '1668', '1669', '1670', '1671', '1672', '1673', '1674', '1675', '1676', '1677', '1678', '1679', '1680', '1681', '1682', '1683', '1684', '1685', '1686', '1687', '1688', '1689', '1690', '1691', '1692', '1693', '1694', '1695', '1696', '1697', '1698', '1699', '1700', '1701', '1702', '1703', '1704', '1705', '1706', '1707', '1708', '1709', '1710', '1711', '1712', '1713', '1714', '1715', '1716', '1717', '1718', '1719', '1720', '1721', '1722', '1723', '1724', '1725', '1726', '1727', '1728', '1729', '1730', '1731', '1732', '1733', '1734', '1735', '1736', '1737', '1738', '1739', '1740', '1741', '1742', '1743', '1744', '1745', '1746', '1747', '1748', '1749', '1750', '1751', '1752', '1753', '1754', '1755', '1756', '1757', '1758', '1759', '1760', '1761', '1762', '1763', '1764', '1765', '1766', '1767', '1768', '1769', '1770', '1771', '1772', '1773', '1774', '1775', '1776', '1777', '1778', '1779', '1780', '1781', '1782', '1783', '1784', '1785', '1786', '1787', '1788', '1789', '1790', '1791', '1792', '1793', '1794', '1795', '1796', '1797', '1798', '1799', '1800', '1801', '1802', '1803', '1804', '1805', '1806', '1807', '1808', '1809', '1810', '1811', '1812', '1813', '1814', '1815', '1816', '1817', '1818', '1819', '1820', '1821', '1822', '1823', '1824', '1825', '1826', '1827', '1828', '1829', '1830', '1831', '1832', '1833', '1834', '1835', '1836', '1837', '1838', '1839', '1840', '1841', '1842', '1843', '1844', '1845', '1846', '1847', '1848', '1849', '1850', '1851', '1852', '1853', '1854', '1855', '1856', '1857', '1858', '1859', '1860', '1861', '1862', '1863', '1864', '1865', '1866', '1867', '1868', '1869', '1870', '1871', '1872', '1873', '1874', '1875', '1876', '1877', '1878', '1879', '1880', '1881', '1882', '1883', '1884', '1885', '1886', '1887', '1888', '1889', '1890', '1891', '1892', '1893', '1894', '1895', '1896', '1897', '1898', '1899', '1900', '1901', '1902', '1903', '1904', '1905', '1906', '1907', '1908', '1909', '1910', '1911', '1912', '1913', '1914', '1915', '1916', '1917', '1918', '1919', '1920', '1921', '1922', '1923', '1924', '1925', '1926', '1927', '1928', '1929', '1930', '1931', '1932', '1933', '1934', '1935', '1936', '1937', '1938', '1939', '1940', '1941', '1942', '1943', '1944', '1945', '1946', '1947', '1948', '1949', '1950', '1951', '1952', '1953', '1954', '1955', '1956', '1957', '1958', '1959', '1960', '1961', '1962', '1963', '1964', '1965', '1966', '1967', '1968', '1969', '1970', '1971', '1972', '1973', '1974', '1975', '1976', '1977', '1978', '1979', '1980', '1981', '1982', '1983', '1984', '1985', '1986', '1987', '1988', '1989', '1990', '1991', '1992', '1993', '1994', '1995', '1996', '1997', '1998', '1999', '2000', '2001', '2002', '2003', '2004', '2005', '2006', '2007', '2008', '2009', '2010', '2011', '2012', '2013', '2014', '2015', '2016', '2017', '2018', '2019', '2020', '2021', '2022', '2023', '2024', '2025', '2026', '2027', '2028', '2029', '2030', '2031', '2032', '2033', '2034', '2035', '2036', '2037', '2038', '2039', '2040', '2041', '2042', '2043', '2044', '2045', '2046', '2047', '2048', '2049', '2050', '2051', '2052', '2053', '2054', '2055', '2056', '2057', '2058', '2059', '2060', '2061', '2062', '2063', '2064', '2065', '2066', '2067', '2068', '2069', '2070', '2071', '2072', '2073', '2074', '2075', '2076', '2077', '2078', '2079', '2080', '2081', '2082', '2083', '2084', '2085', '2086', '2087', '2088', '2089', '2090', '2091', '2092', '2093', '2094', '2095', '2096', '2097', '2098', '2099', '2100', '2101', '2102', '2103', '2104', '2105', '2106', '2107', '2108', '2109', '2110', '2111', '2112', '2113', '2114', '2115', '2116', '2117', '2118', '2119', '2120', '2121', '2122', '2123', '2124', '2125', '2126', '2127', '2128', '2129', '2130', '2131', '2132', '2133', '2134', '2135', '2136', '2137', '2138', '2139', '2140', '2141', '2142', '2143', '2144', '2145', '2146', '2147', '2148', '2149', '2150', '2151', '2152', '2153', '2154', '2155', '2156', '2157', '2158', '2159', '2160', '2161', '2162', '2163', '2164', '2165', '2166', '2167', '2168', '2169', '2170', '2171', '2172', '2173', '2174', '2175', '2176', '2177', '2178', '2179', '2180', '2181', '2182', '2183', '2184', '2185', '2186', '2187', '2188', '2189', '2190', '2191', '2192', '2193', '2194', '2195', '2196', '2197', '2198', '2199', '2200', '2201', '2202', '2203', '2204', '2205', '2206', '2207', '2208', '2209', '2210', '2211', '2212', '2213', '2214', '2215', '2216', '2217', '2218', '2219', '2220', '2221', '2222', '2223', '2224', '2225', '2226', '2227', '2228', '2229', '2230', '2231', '2232', '2233', '2234', '2235', '2236', '2237', '2238', '2239', '2240', '2241', '2242', '2243', '2244', '2245', '2246', '2247', '2248', '2249', '2250', '2251', '2252', '2253', '2254', '2255', '2256', '2257', '2258', '2259', '2260', '2261', '2262', '2263', '2264', '2265', '2266', '2267', '2268', '2269', '2270', '2271', '2272', '2273', '2274', '2275', '2276', '2277', '2278', '2279', '2280', '2281', '2282', '2283', '2284', '2285', '2286', '2287', '2288', '2289', '2290', '2291', '2292', '2293', '2294', '2295', '2296', '2297', '2298', '2299', '2300', '2301', '2302', '2303', '2304', '2305', '2306', '2307', '2308', '2309', '2310', '2311', '2312', '2313', '2314', '2315', '2316', '2317', '2318', '2319', '2320', '2321', '2322', '2323', '2324', '2325', '2326', '2327', '2328', '2329', '2330', '2331', '2332', '2333', '2334', '2335', '2336', '2337', '2338', '2339', '2340', '2341', '2342', '2343', '2344', '2345', '2346', '2347', '2348', '2349', '2350', '2351', '2352', '2353', '2354', '2355', '2356', '2357', '2358', '2359', '2360', '2361', '2362', '2363', '2364', '2365', '2366', '2367', '2368', '2369', '2370', '2371', '2372', '2373', '2374', '2375', '2376', '2377', '2378', '2379', '2380', '2381', '2382', '2383', '2384', '2385', '2386', '2387', '2388', '2389', '2390', '2391', '2392', '2393', '2394', '2395', '2396', '2397', '2398', '2399', '2400', '2401', '2402', '2403', '2404', '2405', '2406', '2407', '2408', '2409', '2410', '2411', '2412', '2413', '2414', '2415', '2416', '2417', '2418', '2419', '2420', '2421', '2422', '2423', '2424', '2425', '2426', '2427', '2428', '2429', '2430', '2431', '2432', '2433', '2434', '2435', '2436', '2437', '2438', '2439', '2440', '2441', '2442', '2443', '2444', '2445', '2446', '2447', '2448', '2449', '2450', '2451', '2452', '2453', '2454', '2455', '2456', '2457', '2458', '2459', '2460', '2461', '2462', '2463', '2464', '2465', '2466', '2467', '2468', '2469', '2470', '2471', '2472', '2473', '2474', '2475', '2476', '2477', '2478', '2479', '2480', '2481', '2482', '2483', '2484', '2485', '2486', '2487', '2488', '2489', '2490', '2491', '2492', '2493', '2494', '2495', '2496', '2497', '2498', '2499', '2500', '2501', '2502', '2503', '2504', '2505', '2506', '2507', '2508', '2509', '2510', '2511', '2512', '2513', '2514', '2515', '2516', '2517', '2518', '2519', '2520', '2521', '2522', '2523', '2524', '2525', '2526', '2527', '2528', '2529', '2530', '2531', '2532', '2533', '2534', '2535', '2536', '2537', '2538', '2539', '2540', '2541', '2542', '2543', '2544', '2545', '2546', '2547', '2548', '2549', '2550', '2551', '2552', '2553', '2554', '2555', '2556', '2557', '2558', '2559', '2560', '2561', '2562', '2563', '2564', '2565', '2566', '2567', '2568', '2569', '2570', '2571', '2572', '2573', '2574', '2575', '2576', '2577', '2578', '2579', '2580', '2581', '2582', '2583', '2584', '2585', '2586', '2587', '2588', '2589', '2590', '2591', '2592', '2593', '2594', '2595', '2596', '2597', '2598', '2599', '2600', '2601', '2602', '2603', '2604', '2605', '2606', '2607', '2608', '2609', '2610', '2611', '2612', '2613', '2614', '2615', '2616', '2617', '2618', '2619', '2620', '2621', '2622', '2623', '2624', '2625', '2626', '2627', '2628', '2629', '2630', '2631', '2632', '2633', '2634', '2635', '2636', '2637', '2638', '2639', '2640', '2641', '2642', '2643', '2644', '2645', '2646', '2647', '2648', '2649', '2650', '2651', '2652', '2653', '2654', '2655', '2656', '2657', '2658', '2659', '2660', '2661', '2662', '2663', '2664', '2665', '2666', '2667', '2668', '2669', '2670', '2671', '2672', '2673', '2674', '2675', '2676', '2677', '2678', '2679', '2680', '2681', '2682', '2683', '2684', '2685', '2686', '2687', '2688', '2689', '2690', '2691', '2692', '2693', '2694', '2695', '2696', '2697', '2698', '2699', '2700', '2701', '2702', '2703', '2704', '2705', '2706', '2707', '2708', '2709', '2710', '2711', '2712', '2713', '2714', '2715', '2716', '2717', '2718', '2719', '2720', '2721', '2722', '2723', '2724', '2725', '2726', '2727', '2728', '2729', '2730', '2731', '2732', '2733', '2734', '2735', '2736', '2737', '2738', '2739', '2740', '2741', '2742', '2743', '2744', '2745', '2746', '2747', '2748', '2749', '2750', '2751', '2752', '2753', '2754', '2755', '2756', '2757', '2758', '2759', '2760', '2761', '2762', '2763', '2764', '2765', '2766', '2767', '2768', '2769', '2770', '2771', '2772', '2773', '2774', '2775', '2776', '2777', '2778', '2779', '2780', '2781', '2782', '2783', '2784', '2785', '2786', '2787', '2788', '2789', '2790', '2791', '2792', '2793', '2794', '2795', '2796', '2797', '2798', '2799', '2800', '2801', '2802', '2803', '2804', '2805', '2806', '2807', '2808', '2809', '2810', '2811', '2812', '2813', '2814', '2815', '2816', '2817', '2818', '2819', '2820', '2821', '2822', '2823', '2824', '2825', '2826', '2827', '2828', '2829', '2830', '2831', '2832', '2833', '2834', '2835', '2836', '2837', '2838', '2839', '2840', '2841', '2842', '2843', '2844', '2845', '2846', '2847', '2848', '2849', '2850', '2851', '2852', '2853', '2854', '2855', '2856', '2857', '2858', '2859', '2860', '2861', '2862', '2863', '2864', '2865', '2866', '2867', '2868', '2869', '2870', '2871', '2872', '2873', '2874', '2875', '2876', '2877', '2878', '2879', '2880', '2881', '2882', '2883', '2884', '2885', '2886', '2887', '2888', '2889', '2890', '2891', '2892', '2893', '2894', '2895', '2896', '2897', '2898', '2899', '2900', '2901', '2902', '2903', '2904', '2905', '2906', '2907', '2908', '2909', '2910', '2911', '2912', '2913', '2914', '2915', '2916', '2917', '2918', '2919', '2920', '2921', '2922', '2923', '2924', '2925', '2926', '2927', '2928', '2929', '2930', '2931', '2932', '2933', '2934', '2935', '2936', '2937', '2938', '2939', '2940', '2941', '2942', '2943', '2944', '2945', '2946', '2947', '2948', '2949', '2950', '2951', '2952', '2953', '2954', '2955', '2956', '2957', '2958', '2959', '2960', '2961', '2962', '2963', '2964', '2965', '2966', '2967', '2968', '2969', '2970', '2971', '2972', '2973', '2974', '2975', '2976', '2977', '2978', '2979', '2980', '2981', '2982', '2983', '2984', '2985', '2986', '2987', '2988', '2989', '2990', '2991', '2992', '2993', '2994', '2995', '2996', '2997', '2998'] \n",
      " \n",
      " \n",
      "lables : [14, 3, 15, 4, 16, 15, 10, 14, 5, 8, 8, 6, 5, 4, 7, 13, 1, 10, 11, 11, 12, 6, 13, 10, 7, 3, 12, 1, 2, 16, 9, 8, 13, 6, 5, 14, 16, 7, 4, 13, 6, 4, 15, 16, 15, 1, 14, 16, 3, 4, 7, 7, 6, 5, 11, 6, 13, 9, 10, 4, 11, 11, 12, 14, 10, 1, 8, 8, 9, 1, 2, 9, 3, 14, 4, 3, 14, 15, 16, 4, 15, 13, 16, 7, 5, 14, 8, 6, 5, 5, 6, 13, 7, 4, 3, 4, 10, 1, 14, 1, 6, 12, 11, 11, 10, 13, 11, 4, 12, 3, 9, 16, 2, 1, 9, 13, 8, 8, 14, 5, 10, 1, 15, 16, 15, 4, 7, 14, 7, 7, 4, 11, 5, 6, 8, 6, 4, 10, 13, 12, 11, 8, 8, 9, 2, 1, 14, 3, 9, 7, 14, 10, 13, 7, 16, 12, 16, 11, 5, 9, 6, 8, 9, 4, 2, 1, 15, 3, 13, 2, 1, 10, 15, 16, 14, 12, 3, 13, 11, 7, 4, 10, 5, 6, 3, 9, 1, 8, 12, 11, 10, 13, 7, 3, 2, 1, 7, 9, 8, 5, 10, 14, 3, 12, 15, 16, 2, 9, 2, 13, 8, 15, 5, 6, 12, 7, 4, 2, 16, 7, 13, 10, 5, 11, 12, 6, 8, 9, 7, 12, 15, 1, 2, 3, 2, 13, 16, 15, 3, 12, 14, 10, 10, 4, 7, 6, 5, 1, 8, 6, 11, 12, 7, 7, 16, 13, 10, 14, 3, 1, 2, 15, 4, 9, 14, 8, 8, 11, 13, 12, 3, 14, 2, 16, 15, 1, 10, 9, 13, 2, 8, 2, 5, 9, 3, 3, 12, 6, 5, 4, 7, 10, 4, 7, 6, 5, 3, 2, 1, 13, 2, 16, 15, 12, 3, 13, 14, 7, 12, 8, 9, 5, 15, 1, 2, 3, 15, 7, 16, 13, 10, 5, 11, 12, 6, 9, 1, 12, 6, 5, 4, 7, 11, 3, 12, 14, 2, 16, 15, 9, 2, 13, 3, 1, 15, 2, 6, 4, 9, 14, 8, 6, 5, 14, 14, 11, 12, 7, 16, 7, 13, 10, 4, 15, 16, 7, 4, 10, 5, 6, 1, 1, 7, 9, 2, 13, 15, 16, 14, 3, 12, 11, 8, 9, 16, 6, 2, 1, 15, 3, 16, 4, 15, 10, 13, 16, 7, 12, 11, 5, 5, 14, 6, 2, 5, 6, 12, 7, 4, 12, 14, 15, 16, 2, 9, 3, 2, 15, 1, 5, 10, 14, 9, 8, 6, 10, 12, 11, 10, 13, 7, 16, 7, 15, 6, 12, 3, 9, 16, 2, 1, 9, 13, 8, 8, 8, 13, 2, 1, 10, 9, 12, 3, 16, 6, 12, 11, 11, 10, 13, 9, 16, 5, 6, 13, 7, 4, 14, 1, 3, 14, 15, 16, 15, 4, 11, 4, 6, 14, 5, 8, 8, 8, 9, 2, 1, 14, 3, 9, 5, 4, 10, 13, 12, 11, 11, 15, 1, 10, 1, 8, 2, 7, 4, 11, 5, 6, 12, 1, 15, 16, 14, 5, 9, 3, 12, 1, 2, 16, 9, 8, 8, 13, 10, 1, 15, 11, 11, 12, 6, 13, 10, 12, 6, 15, 5, 4, 7, 13, 2, 14, 3, 4, 15, 16, 15, 12, 5, 14, 8, 8, 8, 9, 15, 10, 1, 2, 9, 3, 14, 13, 6, 11, 13, 10, 4, 11, 11, 12, 16, 12, 3, 3, 1, 10, 5, 13, 2, 1, 4, 7, 7, 6, 5, 11, 9, 6, 14, 5, 11, 15, 4, 16, 15, 1, 14, 1, 7, 7, 4, 5, 11, 6, 9, 6, 5, 14, 11, 15, 1, 4, 15, 16, 14, 8, 8, 9, 10, 15, 2, 1, 14, 9, 3, 13, 11, 6, 10, 4, 13, 12, 11, 11, 16, 3, 3, 12, 10, 1, 5, 2, 13, 12, 5, 6, 7, 13, 4, 2, 3, 14, 15, 15, 4, 16, 12, 2, 14, 5, 8, 5, 12, 9, 3, 2, 16, 1, 9, 8, 13, 8, 1, 10, 15, 12, 6, 11, 11, 10, 13, 2, 4, 7, 6, 11, 5, 12, 16, 1, 15, 14, 8, 8, 9, 1, 2, 3, 9, 14, 11, 5, 13, 4, 10, 11, 11, 12, 1, 15, 1, 10, 8, 9, 6, 16, 5, 4, 13, 7, 14, 1, 14, 3, 16, 4, 15, 15, 11, 6, 4, 5, 14, 8, 6, 3, 9, 12, 1, 16, 2, 9, 8, 13, 8, 2, 13, 8, 10, 1, 3, 12, 9, 16, 11, 11, 6, 12, 13, 10, 3, 1, 15, 2, 5, 10, 9, 14, 8, 6, 11, 12, 13, 7, 16, 7, 10, 15, 2, 6, 12, 5, 4, 7, 12, 14, 16, 2, 15, 9, 8, 9, 16, 6, 1, 15, 2, 3, 16, 15, 4, 13, 7, 16, 10, 11, 5, 12, 14, 5, 6, 4, 10, 7, 6, 5, 1, 1, 7, 9, 13, 2, 16, 15, 14, 12, 3, 11, 3, 2, 15, 1, 6, 4, 14, 9, 8, 6, 14, 5, 12, 11, 1, 14, 10, 7, 16, 7, 13, 15, 4, 16, 9, 1, 5, 12, 6, 7, 4, 11, 12, 3, 14, 15, 2, 16, 9, 13, 2, 8, 9, 5, 2, 15, 1, 3, 15, 10, 16, 7, 13, 12, 5, 11, 6, 7, 10, 4, 5, 6, 2, 1, 2, 13, 15, 16, 3, 13, 12, 14, 7, 12, 11, 13, 3, 12, 14, 15, 2, 16, 10, 1, 9, 2, 13, 2, 8, 5, 3, 9, 3, 5, 12, 6, 7, 4, 6, 12, 11, 10, 16, 7, 7, 13, 14, 3, 15, 2, 1, 4, 14, 9, 8, 8, 13, 2, 15, 16, 12, 3, 14, 10, 7, 10, 4, 5, 6, 1, 8, 2, 10, 7, 16, 13, 12, 5, 11, 6, 8, 9, 7, 12, 2, 15, 1, 3, 5, 10, 14, 12, 3, 16, 2, 15, 9, 13, 2, 8, 15, 6, 12, 5, 4, 7, 11, 12, 13, 7, 10, 3, 1, 2, 7, 9, 8, 2, 13, 10, 1, 16, 15, 14, 3, 12, 13, 11, 4, 10, 7, 6, 5, 3, 9, 1, 8, 14, 13, 16, 7, 10, 11, 16, 5, 12, 9, 6, 8, 9, 4, 1, 15, 2, 13, 3, 13, 4, 10, 11, 12, 8, 8, 9, 1, 2, 3, 9, 14, 7, 5, 14, 10, 16, 4, 15, 1, 15, 14, 4, 7, 7, 6, 11, 5, 8, 6, 1, 10, 14, 1, 11, 11, 6, 12, 13, 10, 11, 4, 3, 9, 12, 1, 16, 2, 9, 8, 13, 8, 14, 3, 16, 15, 4, 15, 13, 7, 16, 14, 5, 8, 6, 5, 6, 5, 4, 13, 7, 3, 4, 9, 10, 4, 13, 12, 11, 11, 14, 1, 10, 8, 8, 9, 2, 1, 14, 9, 3, 4, 6, 14, 5, 7, 16, 13, 4, 6, 15, 1, 15, 4, 16, 14, 16, 3, 7, 7, 4, 5, 11, 6, 6, 10, 1, 12, 6, 11, 11, 10, 13, 7, 12, 3, 2, 16, 1, 9, 8, 13, 3, 14, 15, 4, 15, 16, 10, 5, 14, 8, 8, 5, 6, 7, 13, 4, 12, 6, 5, 4, 7, 3, 2, 12, 13, 3, 14, 2, 16, 15, 12, 9, 13, 2, 5, 10, 3, 1, 2, 15, 9, 14, 8, 6, 15, 11, 12, 7, 7, 16, 13, 10, 1, 10, 4, 7, 6, 5, 9, 1, 2, 13, 11, 16, 6, 15, 3, 12, 14, 8, 9, 15, 1, 2, 3, 16, 4, 6, 16, 7, 13, 10, 5, 14, 11, 12, 4, 15, 16, 6, 5, 14, 7, 9, 5, 6, 12, 7, 4, 1, 14, 3, 12, 15, 16, 2, 11, 9, 2, 13, 6, 3, 15, 2, 1, 14, 9, 8, 5, 14, 6, 16, 4, 15, 12, 11, 10, 13, 16, 7, 7, 2, 7, 4, 10, 5, 6, 7, 12, 15, 16, 14, 8, 9, 2, 1, 15, 3, 5, 10, 13, 7, 16, 12, 11, 5, 15, 6, 10, 10, 8, 8, 9, 13, 11, 6, 2, 1, 14, 3, 9, 16, 3, 12, 3, 4, 10, 13, 12, 11, 11, 13, 2, 1, 10, 7, 7, 4, 16, 11, 5, 6, 1, 6, 9, 14, 5, 1, 15, 16, 15, 4, 14, 6, 11, 12, 11, 3, 9, 16, 2, 1, 5, 9, 13, 8, 8, 10, 1, 6, 12, 11, 11, 10, 13, 15, 2, 5, 6, 13, 7, 4, 12, 3, 14, 15, 16, 8, 8, 8, 9, 5, 1, 2, 9, 3, 14, 15, 13, 10, 4, 11, 11, 12, 8, 10, 1, 4, 7, 7, 6, 5, 11, 2, 6, 5, 14, 2, 4, 15, 16, 15, 1, 14, 12, 9, 3, 12, 1, 2, 16, 6, 9, 8, 8, 13, 15, 5, 1, 10, 13, 2, 8, 11, 11, 12, 6, 13, 10, 12, 3, 9, 16, 9, 14, 1, 6, 5, 4, 7, 13, 11, 4, 14, 3, 15, 4, 16, 15, 14, 5, 8, 14, 5, 15, 4, 16, 15, 1, 14, 10, 4, 7, 7, 6, 5, 11, 6, 8, 13, 10, 4, 11, 11, 12, 1, 10, 8, 9, 7, 1, 2, 3, 14, 16, 7, 13, 14, 3, 4, 15, 16, 15, 6, 5, 14, 8, 5, 3, 4, 6, 5, 14, 4, 7, 13, 10, 1, 11, 11, 12, 6, 13, 10, 9, 14, 1, 9, 3, 12, 1, 2, 16, 11, 4, 9, 8, 8, 13, 5, 14, 6, 1, 15, 16, 4, 15, 14, 13, 16, 7, 6, 7, 7, 4, 11, 5, 6, 16, 3, 6, 14, 4, 10, 13, 12, 11, 11, 10, 1, 7, 8, 8, 9, 4, 2, 1, 14, 3, 9, 10, 3, 14, 15, 16, 15, 4, 14, 5, 8, 8, 5, 6, 13, 7, 4, 6, 12, 11, 10, 13, 3, 9, 16, 2, 1, 7, 9, 8, 8, 6, 14, 12, 11, 10, 13, 7, 16, 7, 6, 4, 3, 2, 15, 1, 14, 9, 8, 14, 12, 3, 15, 16, 2, 11, 13, 9, 13, 2, 1, 10, 2, 8, 5, 6, 12, 7, 14, 4, 3, 3, 9, 10, 13, 12, 11, 5, 2, 8, 9, 2, 1, 15, 3, 7, 12, 2, 13, 10, 15, 16, 14, 3, 12, 7, 4, 10, 5, 6, 8, 1, 6, 11, 12, 7, 16, 7, 13, 10, 7, 3, 1, 15, 2, 9, 14, 8, 3, 12, 14, 2, 16, 15, 5, 10, 9, 2, 13, 8, 12, 6, 5, 4, 7, 15, 7, 16, 13, 10, 5, 11, 12, 14, 6, 9, 8, 9, 15, 1, 2, 3, 4, 1, 10, 15, 13, 2, 13, 11, 16, 15, 12, 3, 14, 9, 3, 10, 4, 7, 6, 5, 8, 1, 15, 10, 1, 2, 13, 13, 11, 15, 16, 3, 12, 14, 9, 3, 7, 10, 4, 5, 6, 8, 1, 10, 16, 7, 13, 12, 5, 11, 14, 6, 9, 8, 9, 8, 2, 15, 1, 3, 4, 12, 3, 14, 15, 2, 16, 5, 10, 9, 13, 2, 8, 5, 12, 6, 7, 4, 15, 6, 12, 11, 10, 7, 16, 7, 13, 7, 3, 2, 15, 1, 14, 9, 8, 13, 2, 10, 16, 15, 14, 12, 3, 4, 10, 7, 6, 5, 8, 1, 13, 10, 11, 5, 12, 2, 8, 9, 1, 15, 2, 3, 7, 12, 14, 3, 12, 16, 2, 15, 11, 13, 9, 2, 13, 10, 1, 8, 2, 6, 12, 5, 4, 7, 3, 9, 3, 6, 14, 11, 12, 13, 7, 16, 7, 10, 4, 6, 3, 1, 15, 2, 9, 14, 8, 11, 6, 12, 13, 10, 3, 9, 1, 16, 2, 7, 9, 8, 8, 10, 14, 3, 16, 4, 15, 15, 5, 14, 8, 8, 6, 5, 4, 13, 7, 14, 13, 4, 10, 11, 11, 12, 1, 10, 7, 8, 8, 9, 4, 1, 2, 3, 9, 14, 14, 5, 6, 16, 15, 4, 1, 15, 14, 13, 7, 16, 6, 4, 7, 7, 6, 11, 5, 16, 3, 6, 1, 10, 12, 6, 11, 11, 10, 13, 14, 1, 12, 9, 3, 2, 16, 1, 11, 4, 9, 8, 13, 8, 7, 16, 13, 3, 14, 15, 15, 4, 16, 6, 14, 5, 8, 5, 3, 4, 5, 14, 6, 7, 13, 4, 10, 4, 13, 12, 11, 11, 10, 1, 8, 9, 7, 2, 1, 14, 3, 5, 14, 15, 1, 4, 15, 16, 14, 10, 7, 7, 4, 5, 11, 6, 6, 8, 9, 14, 1, 5, 6, 7, 13, 4, 11, 4, 3, 14, 15, 4, 15, 16, 5, 14, 8, 12, 9, 3, 2, 16, 1, 6, 9, 8, 13, 8, 15, 5, 10, 1, 8, 2, 13, 12, 6, 11, 11, 10, 13, 9, 3, 12, 16, 7, 7, 4, 5, 11, 6, 2, 6, 12, 2, 14, 5, 15, 1, 15, 4, 16, 14, 12, 8, 8, 9, 5, 12, 2, 1, 14, 9, 3, 15, 10, 4, 13, 12, 11, 11, 8, 1, 10, 2, 6, 5, 4, 13, 7, 12, 14, 3, 16, 15, 8, 3, 9, 12, 11, 1, 16, 2, 5, 9, 8, 13, 8, 1, 10, 11, 11, 6, 12, 13, 10, 1, 15, 4, 7, 7, 6, 11, 16, 5, 1, 6, 9, 5, 14, 16, 4, 15, 1, 15, 14, 6, 11, 10, 8, 8, 9, 13, 6, 11, 1, 2, 3, 9, 14, 16, 3, 12, 3, 13, 4, 10, 11, 11, 12, 2, 13, 10, 1, 8, 9, 1, 15, 2, 3, 5, 13, 16, 7, 10, 11, 5, 12, 15, 6, 10, 2, 4, 10, 7, 6, 5, 7, 12, 16, 15, 14, 6, 3, 1, 2, 15, 9, 14, 8, 14, 5, 6, 16, 15, 4, 11, 12, 13, 7, 7, 16, 10, 7, 9, 6, 12, 5, 4, 7, 1, 14, 12, 3, 16, 2, 15, 11, 9, 13, 2, 8, 9, 2, 15, 1, 3, 16, 4, 6, 10, 7, 16, 13, 12, 5, 11, 14, 15, 4, 16, 6, 14, 5, 1, 7, 10, 4, 5, 6, 9, 1, 13, 2, 11, 15, 16, 12, 3, 14, 5, 10, 3, 15, 2, 1, 14, 9, 8, 6, 15, 12, 11, 10, 16, 7, 7, 13, 5, 12, 6, 7, 4, 2, 3, 3, 12, 14, 15, 2, 16, 12, 9, 2, 13, 9, 5, 14, 11, 14, 15, 16, 2, 4, 15, 1, 5, 6, 12, 16, 7, 4, 9, 12, 11, 11, 10, 13, 7, 3, 12, 16, 10, 1, 2, 13, 9, 8, 8, 1, 15, 3, 9, 2, 1, 6, 15, 16, 15, 4, 14, 7, 12, 2, 14, 5, 12, 7, 4, 10, 5, 6, 2, 1, 10, 15, 10, 13, 12, 11, 5, 11, 5, 2, 1, 15, 3, 3, 9, 2, 8, 8, 9, 9, 12, 14, 2, 16, 15, 2, 12, 6, 5, 4, 7, 11, 11, 12, 7, 13, 10, 1, 15, 1, 10, 9, 8, 8, 9, 3, 11, 1, 2, 5, 10, 4, 15, 16, 15, 14, 6, 11, 5, 14, 9, 10, 4, 7, 6, 5, 1, 2, 13, 10, 1, 16, 3, 12, 13, 10, 11, 5, 11, 12, 6, 15, 1, 2, 9, 3, 3, 8, 8, 2, 9, 6, 8, 10, 16, 7, 13, 10, 4, 11, 12, 15, 1, 4, 2, 3, 14, 5, 8, 9, 5, 12, 16, 15, 1, 14, 9, 8, 2, 4, 7, 6, 5, 11, 15, 4, 16, 11, 12, 6, 7, 16, 13, 10, 14, 5, 6, 6, 9, 8, 6, 7, 3, 1, 2, 16, 8, 13, 2, 12, 3, 14, 3, 16, 15, 11, 4, 6, 11, 5, 4, 7, 13, 14, 1, 7, 10, 9, 6, 14, 5, 4, 10, 13, 7, 16, 12, 11, 14, 16, 15, 4, 3, 2, 4, 1, 14, 3, 4, 13, 6, 8, 5, 9, 11, 1, 15, 16, 9, 14, 12, 3, 8, 13, 2, 9, 1, 7, 4, 11, 5, 6, 15, 6, 12, 11, 10, 13, 16, 7, 6, 9, 8, 5, 3, 16, 2, 1, 2, 13, 8, 3, 14, 3, 13, 12, 15, 5, 16, 12, 5, 11, 6, 13, 7, 4, 2, 3, 10, 13, 8, 16, 12, 3, 9, 7, 4, 11, 5, 6, 13, 6, 11, 1, 15, 16, 9, 14, 3, 12, 10, 1, 8, 2, 13, 2, 4, 1, 14, 3, 4, 8, 5, 9, 8, 6, 4, 10, 13, 16, 7, 12, 11, 14, 11, 5, 6, 13, 7, 4, 10, 8, 13, 2, 8, 3, 14, 12, 3, 15, 16, 10, 2, 9, 8, 7, 3, 16, 2, 1, 6, 12, 11, 10, 13, 7, 16, 6, 8, 4, 7, 6, 5, 11, 10, 16, 15, 1, 11, 12, 3, 14, 9, 13, 2, 8, 1, 2, 3, 14, 7, 8, 9, 13, 10, 4, 11, 12, 6, 5, 11, 4, 7, 13, 9, 3, 10, 8, 8, 2, 13, 10, 1, 3, 12, 14, 3, 16, 15, 11, 13, 9, 8, 11, 4, 3, 1, 2, 16, 14, 1, 11, 12, 6, 16, 7, 13, 10, 6, 9, 8, 8, 9, 3, 1, 2, 7, 11, 12, 7, 13, 10, 15, 12, 6, 5, 4, 7, 16, 10, 8, 5, 14, 9, 5, 10, 14, 4, 2, 15, 16, 15, 4, 15, 1, 2, 9, 3, 3, 8, 8, 2, 9, 9, 1, 10, 14, 13, 10, 5, 11, 11, 12, 14, 10, 4, 7, 6, 5, 15, 3, 15, 4, 16, 15, 14, 7, 16, 13, 14, 5, 6, 9, 8, 8, 3, 9, 2, 1, 4, 12, 11, 11, 9, 10, 13, 7, 14, 1, 10, 3, 5, 6, 12, 16, 7, 4, 6, 9, 14, 5, 13, 7, 16, 14, 15, 16, 15, 2, 4, 7, 12, 2, 1, 15, 3, 3, 2, 8, 9, 10, 1, 8, 3, 2, 10, 13, 12, 11, 11, 5, 8, 7, 4, 10, 5, 6, 15, 16, 4, 15, 14, 10, 5, 14, 8, 4, 10, 7, 6, 5, 16, 15, 4]\n"
     ]
    }
   ],
   "source": [
    "print('file names: ', filenames ,'\\n \\n', '\\nlables :', labels) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "0346649d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>label</th>\n",
       "      <th>pixel0</th>\n",
       "      <th>pixel1</th>\n",
       "      <th>pixel2</th>\n",
       "      <th>pixel3</th>\n",
       "      <th>pixel4</th>\n",
       "      <th>pixel5</th>\n",
       "      <th>pixel6</th>\n",
       "      <th>pixel7</th>\n",
       "      <th>...</th>\n",
       "      <th>pixel57171</th>\n",
       "      <th>pixel57172</th>\n",
       "      <th>pixel57173</th>\n",
       "      <th>pixel57174</th>\n",
       "      <th>pixel57175</th>\n",
       "      <th>pixel57176</th>\n",
       "      <th>pixel57177</th>\n",
       "      <th>pixel57178</th>\n",
       "      <th>pixel57179</th>\n",
       "      <th>pixel57180</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>16</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 57183 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   id  label  pixel0  pixel1  pixel2  pixel3  pixel4  pixel5  pixel6  pixel7  \\\n",
       "0   0     14       0       0       0       0       0       0       0       0   \n",
       "1   1      3       0       0       0       0       0       0       0       0   \n",
       "2   2     15       0       0       0       0       0       0       0       0   \n",
       "3   3      4       0       0       0       0       0       0       0       0   \n",
       "4   4     16       0       0       0       0       0       0       0       0   \n",
       "\n",
       "   ...  pixel57171  pixel57172  pixel57173  pixel57174  pixel57175  \\\n",
       "0  ...           0           0           0           0           0   \n",
       "1  ...           0           0           0           0           0   \n",
       "2  ...           0           0           0           0           0   \n",
       "3  ...           0           0           0           0           0   \n",
       "4  ...           0           0           0           0           0   \n",
       "\n",
       "   pixel57176  pixel57177  pixel57178  pixel57179  pixel57180  \n",
       "0           0           0           0           0           0  \n",
       "1           0           0           0           0           0  \n",
       "2           0           0           0           0           0  \n",
       "3           0           0           0           0           0  \n",
       "4           0           0           0           0           0  \n",
       "\n",
       "[5 rows x 57183 columns]"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_csv.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "fcb099e7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 2999 entries, 0 to 2998\n",
      "Columns: 57183 entries, id to pixel57180\n",
      "dtypes: int64(57183)\n",
      "memory usage: 1.3 GB\n"
     ]
    }
   ],
   "source": [
    " train_csv.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "97f37ee7",
   "metadata": {},
   "outputs": [],
   "source": [
    "#modeling our data \n",
    "#train data\n",
    "\n",
    "train_images=[]\n",
    "train_labels=[]\n",
    "\n",
    "for index, row in train_csv.iterrows():    \n",
    "        pixels = row[2:] \n",
    "        pixels = np.array(pixels, dtype='float').reshape((211,271))\n",
    "        label = row[1]\n",
    "        train_images.append(pixels)\n",
    "        train_labels.append(label)\n",
    "        \n",
    "       "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "45c386b4",
   "metadata": {},
   "outputs": [],
   "source": [
    "train_labels = pd.get_dummies(train_labels).values\n",
    "train_images = np.array(train_images)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "ad678f81",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[[0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        ...,\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.]],\n",
       "\n",
       "       [[0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        ...,\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.]],\n",
       "\n",
       "       [[0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        ...,\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.]],\n",
       "\n",
       "       ...,\n",
       "\n",
       "       [[0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        ...,\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.]],\n",
       "\n",
       "       [[0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        ...,\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.]],\n",
       "\n",
       "       [[0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        ...,\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.]]])"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_images"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "d6d6e931",
   "metadata": {},
   "outputs": [],
   "source": [
    "#test data \n",
    "\n",
    "test_images=[]\n",
    "\n",
    "for index, row in test_csv.iterrows():    \n",
    "        pixels = row[1:] \n",
    "        pixels = np.array(pixels, dtype='float').reshape((211,271))\n",
    "        test_images.append(pixels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "8bc022a5",
   "metadata": {},
   "outputs": [],
   "source": [
    "test_images=np.array(test_images)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "498b9f1e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[[0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        ...,\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.]],\n",
       "\n",
       "       [[0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        ...,\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.]],\n",
       "\n",
       "       [[0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        ...,\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.]],\n",
       "\n",
       "       ...,\n",
       "\n",
       "       [[0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        ...,\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.]],\n",
       "\n",
       "       [[0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        ...,\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.]],\n",
       "\n",
       "       [[0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        ...,\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.]]])"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_images"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "c09237ef",
   "metadata": {},
   "outputs": [],
   "source": [
    "train_images=np.reshape(train_images,(-1,211, 271,1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "85346f10",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(2999, 211, 271, 1)\n"
     ]
    }
   ],
   "source": [
    "print(train_images.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "b4cd7e74",
   "metadata": {},
   "outputs": [],
   "source": [
    "x_train,x_val,y_train,y_val = train_test_split(train_images,train_labels,random_state=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "b64c837f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x2788b114490>"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# a glance at our train data \n",
    "\n",
    "plt.imshow(train_images[0])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6edf2e1e",
   "metadata": {},
   "source": [
    "# Building our model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "da26f7d8",
   "metadata": {},
   "outputs": [],
   "source": [
    "model= Sequential()\n",
    "model.add(Conv2D(kernel_size=(3,3), filters=32, activation='tanh',input_shape=x_train.shape[1:]))\n",
    "model.add(MaxPool2D(2,2))\n",
    "model.add(Conv2D(filters=30,kernel_size = (3,3),activation='tanh'))\n",
    "model.add(MaxPool2D(2,2))\n",
    "\n",
    "\n",
    "model.add(Flatten())\n",
    "\n",
    "model.add(Dense(32,activation='relu'))\n",
    "model.add(Dropout(0.4))\n",
    "\n",
    "model.add(Dense(16,activation = 'softmax'))\n",
    "    \n",
    "model.compile(\n",
    "              loss='categorical_crossentropy', \n",
    "              metrics=['acc'],\n",
    "              optimizer='adam'\n",
    "             )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "f39d6cfb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(211, 271, 1)"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_train.shape[1:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "e3ff6716",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " conv2d (Conv2D)             (None, 209, 269, 32)      320       \n",
      "                                                                 \n",
      " max_pooling2d (MaxPooling2D  (None, 104, 134, 32)     0         \n",
      " )                                                               \n",
      "                                                                 \n",
      " conv2d_1 (Conv2D)           (None, 102, 132, 30)      8670      \n",
      "                                                                 \n",
      " max_pooling2d_1 (MaxPooling  (None, 51, 66, 30)       0         \n",
      " 2D)                                                             \n",
      "                                                                 \n",
      " flatten (Flatten)           (None, 100980)            0         \n",
      "                                                                 \n",
      " dense (Dense)               (None, 32)                3231392   \n",
      "                                                                 \n",
      " dropout (Dropout)           (None, 32)                0         \n",
      "                                                                 \n",
      " dense_1 (Dense)             (None, 16)                528       \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 3,240,910\n",
      "Trainable params: 3,240,910\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "542ee944",
   "metadata": {},
   "source": [
    "# Training the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "dbac0569",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/15\n",
      "71/71 [==============================] - 52s 727ms/step - loss: 1.5604 - acc: 0.4873 - val_loss: 0.3538 - val_acc: 0.9280\n",
      "Epoch 2/15\n",
      "71/71 [==============================] - 53s 754ms/step - loss: 0.7323 - acc: 0.7483 - val_loss: 0.1842 - val_acc: 0.9493\n",
      "Epoch 3/15\n",
      "71/71 [==============================] - 51s 714ms/step - loss: 0.5422 - acc: 0.7986 - val_loss: 0.1460 - val_acc: 0.9640\n",
      "Epoch 4/15\n",
      "71/71 [==============================] - 50s 698ms/step - loss: 0.5047 - acc: 0.8186 - val_loss: 0.1125 - val_acc: 0.9707\n",
      "Epoch 5/15\n",
      "71/71 [==============================] - 49s 698ms/step - loss: 0.4185 - acc: 0.8493 - val_loss: 0.1103 - val_acc: 0.9720\n",
      "Epoch 6/15\n",
      "71/71 [==============================] - 50s 698ms/step - loss: 0.4000 - acc: 0.8510 - val_loss: 0.0718 - val_acc: 0.9813\n",
      "Epoch 7/15\n",
      "71/71 [==============================] - 51s 713ms/step - loss: 0.3568 - acc: 0.8684 - val_loss: 0.0900 - val_acc: 0.9693\n",
      "Epoch 8/15\n",
      "71/71 [==============================] - 57s 801ms/step - loss: 0.3819 - acc: 0.8631 - val_loss: 0.0983 - val_acc: 0.9787\n",
      "Epoch 9/15\n",
      "71/71 [==============================] - 52s 736ms/step - loss: 0.3583 - acc: 0.8693 - val_loss: 0.1189 - val_acc: 0.9733\n",
      "Epoch 10/15\n",
      "71/71 [==============================] - 52s 739ms/step - loss: 0.3265 - acc: 0.8759 - val_loss: 0.0966 - val_acc: 0.9880\n",
      "Epoch 11/15\n",
      "71/71 [==============================] - 50s 700ms/step - loss: 0.3177 - acc: 0.8880 - val_loss: 0.0789 - val_acc: 0.9840\n",
      "Epoch 12/15\n",
      "71/71 [==============================] - 50s 711ms/step - loss: 0.2905 - acc: 0.8951 - val_loss: 0.0805 - val_acc: 0.9853\n",
      "Epoch 13/15\n",
      "71/71 [==============================] - 56s 788ms/step - loss: 0.2951 - acc: 0.8911 - val_loss: 0.0741 - val_acc: 0.9880\n",
      "Epoch 14/15\n",
      "71/71 [==============================] - 52s 740ms/step - loss: 0.2917 - acc: 0.8964 - val_loss: 0.0830 - val_acc: 0.9853\n",
      "Epoch 15/15\n",
      "71/71 [==============================] - 53s 741ms/step - loss: 0.2605 - acc: 0.9071 - val_loss: 0.0800 - val_acc: 0.9880\n"
     ]
    }
   ],
   "source": [
    "epochS= 15\n",
    "batch_Size=32\n",
    "\n",
    "history = model.fit(x_train,y_train,epochs=epochS,batch_size=batch_Size,validation_data=(x_val,y_val))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5e3dec17",
   "metadata": {},
   "source": [
    "we reached 90% accuracy , we'll take it for now :)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "807a0328",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Visualizing Training vs Validation loss\n",
    "\n",
    "\n",
    "loss_train = history.history['loss']\n",
    "loss_val = history.history['val_loss']\n",
    "epochs = range(1,16)\n",
    "plt.plot(epochs, loss_train, 'g', label='Training loss')\n",
    "plt.plot(epochs, loss_val, 'b', label='validation loss')\n",
    "plt.title('Training and Validation loss')\n",
    "plt.xlabel('Epochs')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "77136c0d",
   "metadata": {},
   "source": [
    "The loss is decreasing in both training and validation , thats means the model we built is actually learning !"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "af3a4c19",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# #Visualizing Training vs Validation accuracy\n",
    "\n",
    "loss_train = history.history['acc']\n",
    "loss_val = history.history['val_acc']\n",
    "epochs = range(1,16)\n",
    "plt.plot(epochs, loss_train, 'g', label='Training accuracy')\n",
    "plt.plot(epochs, loss_val, 'b', label='validation accuracy')\n",
    "plt.title('Training and Validation accuracy')\n",
    "plt.xlabel('Epochs')\n",
    "plt.ylabel('Accuracy')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d29e99ec",
   "metadata": {},
   "source": [
    "The accuracy is increasing meaning our model is getting better at predicting ! "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4a796255",
   "metadata": {},
   "source": [
    "# Evaluating the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 269,
   "id": "ed56effd",
   "metadata": {},
   "outputs": [],
   "source": [
    "predictions=model.predict(x_val)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 272,
   "id": "0d2f6740",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[45  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0]\n",
      " [ 0 40  0  0  0  0  0  0  0  0  0  0  0  0  0  0]\n",
      " [ 0  0 47  0  0  0  0  0  0  0  0  0  0  0  0  0]\n",
      " [ 0  0  0 47  0  0  0  0  0  0  0  0  0  0  0  0]\n",
      " [ 0  0  0  0 46  0  0  0  0  0  0  0  0  0  0  0]\n",
      " [ 0  0  0  0  0 49  0  0  0  0  0  0  0  0  0  0]\n",
      " [ 0  0  0  0  0  0 48  0  0  0  0  0  0  0  0  0]\n",
      " [ 0  0  0  0  0  0  0 40  0  0  0  0  0  0  0  0]\n",
      " [ 0  0  0  0  0  0  0  0 39  0  0  0  0  0  0  0]\n",
      " [ 0  0  0  0  0  0  0  0  0 51  0  0  0  0  0  0]\n",
      " [ 0  0  0  0  0  0  0  0  0  0 50  0  0  0  0  0]\n",
      " [ 0  0  0  0  0  0  0  0  0  0  0 49  0  0  0  0]\n",
      " [ 0  0  0  0  0  0  0  0  0  0  0  0 56  0  0  0]\n",
      " [ 0  0  0  0  0  0  0  0  0  0  0  0  0 36  0  0]\n",
      " [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0 49  0]\n",
      " [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 58]]\n"
     ]
    }
   ],
   "source": [
    "#confusion matrix \n",
    "\n",
    "y_pred=model.predict(x_val) \n",
    "y_pred=np.argmax(y_pred, axis=1)\n",
    "y_val=np.argmax(y_val, axis=1)\n",
    "cm = confusion_matrix(y_val, y_val)\n",
    "print(cm)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9aab064a",
   "metadata": {},
   "source": [
    "A diagonal confusion matrix means all predictions made by our model were correct "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "498cacb2",
   "metadata": {},
   "source": [
    "# Predicting labels for the test sample "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 284,
   "id": "5c3a5c56",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([13,  9, 13,  4,  6, 11,  0, 14,  1,  2,  2,  1,  7,  8,  0,  9,  1,\n",
       "        2, 12,  9, 10,  4, 10, 11,  2,  5, 11,  4,  3,  6, 15,  5,  4, 13,\n",
       "        8, 12, 15,  6, 13, 15,  1,  3, 14, 14,  8,  7,  7,  2,  8,  0,  1,\n",
       "        3, 10, 10, 11, 12,  6,  8,  9, 13,  9,  0, 13,  6,  9,  3,  4,  5,\n",
       "       14,  2, 14,  3, 14, 15, 13, 15,  6, 12,  4, 13,  5,  3,  1, 14,  0,\n",
       "        2,  8,  2,  7,  1,  7,  8,  8,  9,  0, 13,  9, 12,  2, 11, 10,  4,\n",
       "       10, 14,  4, 11,  5, 15,  6,  3,  7,  9,  8, 13,  4,  4,  9, 13, 14,\n",
       "       14,  3,  1, 15,  8,  7,  7,  8,  2,  1,  0,  6, 11, 10,  9,  6, 12,\n",
       "        8,  7, 10,  3,  2,  1, 15,  0, 13,  0, 11,  5, 10,  9,  6, 15, 12,\n",
       "        5, 10,  4,  5,  6, 12,  3,  8,  1,  9,  7,  7, 12,  1,  0,  9,  5,\n",
       "       11,  2, 13, 14, 15, 10, 12,  1,  0, 13,  2,  6,  7,  8,  9,  3, 12,\n",
       "       11, 10,  7,  6,  3,  4, 10,  5,  9, 14,  0, 15,  8,  2, 10, 11, 13,\n",
       "        7,  1, 12,  2,  1,  7,  6,  2,  0, 15,  1, 10,  5, 11, 12, 15,  6,\n",
       "        9,  5,  5,  4, 10,  3, 12,  6,  9,  7,  1, 12,  7, 13,  2, 11,  2,\n",
       "       15, 14,  9,  0,  1,  3,  2, 13,  3,  7,  8,  4,  7,  5, 12,  6, 15,\n",
       "       10,  9, 10, 11, 13,  7, 12, 15,  2,  8, 11,  3,  6,  5, 10,  4, 12,\n",
       "       10,  5, 15,  0, 14, 13, 11,  2,  8,  0,  9, 12,  1,  7, 12,  1,  7,\n",
       "       13, 11,  2, 12,  2, 15, 14, 11,  5, 10,  4,  3, 12,  6,  2,  1,  9,\n",
       "       14, 10,  5, 11, 12,  6, 15,  9,  5,  8,  7,  4,  2,  0, 15,  9, 10,\n",
       "       15,  0, 14, 13,  2, 10,  8,  1, 12,  7,  8,  0,  3,  6,  5, 10,  4,\n",
       "        5,  4, 13, 12, 15,  6,  3,  9, 13, 10, 11, 15,  3, 14,  2,  0,  1,\n",
       "        3,  2, 13, 12,  5,  7,  8,  4,  7,  1, 12,  2,  2, 11, 13, 14, 15,\n",
       "       10,  3,  4, 10,  5,  6, 12,  3, 13,  0,  6,  9,  8,  3, 14, 15, 11,\n",
       "        5, 10,  9, 15,  6, 12,  4, 13,  5,  5,  8,  7,  5,  6,  2,  1, 15,\n",
       "        0, 11, 14,  0, 15,  8, 13,  7,  1,  6,  3,  4, 10,  5,  5,  9,  7,\n",
       "        9,  3,  6, 15, 12, 11, 10, 14,  3,  1,  0, 13,  2,  4,  7,  4,  8,\n",
       "       12,  1,  0,  9, 15, 11,  2,  9, 12, 11,  4, 10, 10,  5,  1, 14,  0,\n",
       "        2,  8,  2,  7,  1,  7,  8, 14, 14,  3, 15, 13,  5, 10, 13,  4,  8,\n",
       "        6,  9,  3,  4, 15,  5,  0, 11, 10, 10,  9,  6, 12, 14,  0,  9,  0,\n",
       "        8,  7,  7, 10,  8,  2,  1,  0,  4,  9,  8, 11, 13, 14,  1, 15,  1,\n",
       "        4, 11,  5,  6,  3,  9,  0, 14, 12,  9, 10, 10,  4, 11,  4,  0, 14,\n",
       "        1,  2,  8,  2,  7,  1,  7,  8, 15,  3, 14, 14, 13,  6, 11,  4, 13,\n",
       "        1, 11,  3,  9,  6,  5,  4,  1, 10, 10, 11, 12,  6,  9, 11,  2, 15,\n",
       "        4,  0,  9, 12,  1,  8,  7,  7, 14,  0,  2,  8, 10,  0,  1,  5, 13,\n",
       "        4,  8, 10, 13, 15, 14,  1,  3, 14,  0,  5, 11,  4,  3,  6, 15,  8,\n",
       "        2,  8,  4, 10,  5, 12,  6,  3,  7,  9,  9,  0,  1, 12,  7, 10, 12,\n",
       "        2, 13,  2, 11, 14, 15,  8,  7,  7,  2, 15,  1,  0, 10,  3,  5, 11,\n",
       "       10,  9, 12, 15,  6, 13,  0,  5,  7,  6,  3, 10,  4,  5,  0, 14, 15,\n",
       "        8,  9, 11,  2,  9,  7, 12,  1,  6,  1,  3,  0, 13,  2,  7,  4,  2,\n",
       "       11,  5,  3,  4, 12,  6, 15, 11, 10,  0,  5, 10,  4,  3,  6, 12,  7,\n",
       "        5,  7, 12,  1,  9, 11,  2, 13,  2, 15, 14,  8,  7,  2,  0,  1, 15,\n",
       "        6, 10, 11,  5, 12,  9,  7, 12,  3,  6,  5,  4, 10, 15,  8,  2, 11,\n",
       "       15, 14,  0,  2, 10, 13,  8, 12, 10,  5,  1, 12,  7,  9,  0,  3,  0,\n",
       "        3,  1,  2, 13,  7,  8,  4,  5, 13, 15,  6, 12,  9,  3, 10, 11, 14,\n",
       "        0,  1,  8,  2,  6, 11,  7,  7,  8, 12,  9,  4, 10, 11,  1,  7,  9,\n",
       "        3,  6,  5,  4,  9,  3, 14, 15, 14, 13,  4, 13,  8,  7,  7,  3,  8,\n",
       "        2,  0,  1, 13, 10, 10, 11,  6, 12,  9,  0,  9, 11,  5,  4,  3,  6,\n",
       "       15,  2, 13,  4,  8,  5, 13,  3, 14,  3,  1, 15, 14,  6, 15, 12,  1,\n",
       "        0, 14,  2,  2,  8,  3,  1,  7,  7,  8,  0,  9,  8,  9,  8, 12, 11,\n",
       "       10,  4, 10, 13, 13, 14,  2,  6,  3,  9,  4,  5, 12,  6, 15, 14, 15,\n",
       "       14,  3, 13,  5, 13,  4,  8,  7,  6, 12,  2,  1,  0, 11, 10, 10,  9,\n",
       "       12,  6,  9,  0,  4,  5, 11, 15,  6,  3, 14,  7,  8,  4, 13, 13, 14,\n",
       "       15,  1,  3, 14,  4,  9, 10, 14, 15,  3, 14, 13,  7,  4, 13,  8,  0,\n",
       "        6,  3,  9,  4, 15,  5,  9,  0,  4,  1, 12,  9, 12, 11, 10, 10,  4,\n",
       "       15,  2, 11,  1,  0, 14,  2,  1,  8,  5,  1,  7,  7,  8,  2,  1, 13,\n",
       "        4, 13, 14, 15, 14,  1,  3, 11,  4,  5, 11, 15,  6,  3,  1, 11, 14,\n",
       "       11, 10, 10,  9, 12,  6,  0,  9,  8,  7,  7,  4,  9,  2,  8,  1,  0,\n",
       "        6, 11, 15, 14, 13,  1,  9,  3,  6,  5,  4,  0,  9, 12,  9,  4, 10,\n",
       "       10, 11,  0, 14, 14,  0,  1,  8,  2,  2, 10,  4,  7], dtype=int64)"
      ]
     },
     "execution_count": 284,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "y_pred=model.predict(test_images)\n",
    "y_pred=np.argmax(y_pred, axis=1)\n",
    "y_pred\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ca8ca7e6",
   "metadata": {},
   "source": [
    "# FOR SUBMITTING ON KAGGLE "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 286,
   "id": "dc60fbd2",
   "metadata": {},
   "outputs": [],
   "source": [
    "#sub=pd.read_csv(r\"C:\\Users\\ahmed\\Desktop\\labs\\sample_submission.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 290,
   "id": "3911c361",
   "metadata": {},
   "outputs": [],
   "source": [
    "#for index , row in sub.iterrows() :\n",
    "#   sub[\"label\"].loc[index]=y_pred[index]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 295,
   "id": "1ca1c0df",
   "metadata": {},
   "outputs": [],
   "source": [
    "#sub.to_csv(r\"C:\\Users\\ahmed\\Desktop\\labs\\sample_submission1.csv\",index=False)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
